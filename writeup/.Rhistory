###Data Preparation
####Load Relevant Libraries and Functions
#load data
# tidy data, if neccesary
# each row will have these variables: participant id#, condition, switch_response, switchwinrelfreq, staywinrelfreq, givenjustification, correctjustification, priorproblemfamiliarity, prioranswerfamiliarity
####Import data
#### Data exclusion / filtering
# Filter participants who have prior answer familarity
#### Prepare data for analysis - create columns etc.
datafile <- read.csv("C:/Users/john-/krauss2003/data/datafile.csv", header=FALSE, comment.char="#")
View(datafile)
install.packages("dplyr")
library(diplyr)
library(dplyr)
library(dplyr)
data1 <- select(datafile, -V1)%>%
select(datafile, -V1)%>%
select(datafile, -V1)%>%
select(datafile, -V1)%>%
select(datafile, -V1)%>%
data1 <- select(datafile, -V1)
data1 <- select(datafile, -V1)
View(data1)
data1 <- select(datafile, -V1)%>%
select(datafile, -V2)%>%
select(datafile, -V3)%>%
select(datafile, -V5)%>%
select(datafile, -V7)%>%
select(datafile, -V10, -V11, -V12, -V13)%>%
View(data1)
data1 <- select(datafile, -V1)%>%
+     select(datafile, -V2)%>%
+     select(datafile, -V3)%>%
+     select(datafile, -V5)%>%
+     select(datafile, -V7)
data1 <- select(datafile, -V1)%>%
select(datafile, -V2)%>%
select(datafile, -V3)
View(datafile)
View(data1)
dataedit <- read.csv("C:/Users/john-/krauss2003/data/dataedit.csv", comment.char="#")
View(dataedit)
data1 <- dataedit[-c(13)]
View(data1)
data1$expgroup <- ifelse(dataedit$Block.Randomizer...Display.Order, c("1"),c("0"))
data1$expgroup <- ifelse(dataedit$Block.Randomizer...Display.Order, c("1"),c("0"))
data1$expgroup <- NA
rmeove(data1)
rm(data1)
data1 <- dataedit[-c(13)]
data1$expgroup <- NA
View(data1)
rm(data1)
data1 <- dataedit[-c(13)]
ifelse(dataedit$Block.Randomizer...Display.Order=="Experimentalcondition", 1, 0)
View(data1)
A <-  ifelse(dataedit$Block.Randomizer...Display.Order=="Experimentalcondition", 1, 0)
A[,23] <-  ifelse(dataedit$Block.Randomizer...Display.Order=="Experimentalcondition", 1, 0)
dataedit$expgroup <- revalue(dataedit$Block.Randomizer...Display.Order, c("Experimentalcondition"="1", "Controlcondition"="0"))
install.packages(plyr)
install.packages("plyr")
library(plyr)
dataedit$expgroup <- revalue(dataedit$Block.Randomizer...Display.Order, c("Experimentalcondition"="1", "Controlcondition"="0"))
View(dataedit)
dataedit$familiarity <- revalue(dataedit$Please.also.tell.us.if.you.were.already.familiar.with.this.game., c("I was familiar with this game"="1", "I was not familiar with this game"="0"))
dataedit$switch <- revalue(dataedit$After.Monty.Hall.has.opened.a..goat.door...what.should.you.do., c("switch"="1", "stay"="0"))
dataedit$switch <- revalue(dataedit$What.should.the.contestant.therefore.do., c("switch"="1", "stay"="0"))
View(dataedit)
View(dataedit)
dataedit$switch <- revalue(dataedit$After.Monty.Hall.has.opened.a..goat.door...what.should.you.do., c("switch"="1", "stay"="0"))
dataedit$switchcontrol <- revalue(dataedit$After.Monty.Hall.has.opened.a..goat.door...what.should.you.do., c("switch"="1", "stay"="0"))
dataedit$switchexperimental <- revalue(dataedit$After.Monty.Hall.has.opened.a..goat.door...what.should.you.do., c("switch"="1", "stay"="0"))
View(dataedit)
View(dataedit)
> dataedit$switchexperimental <- revalue(dataedit$What.should.the.contestant.therefore.do., c("switch"="1", "stay"="0"))
View(dataedit)
dataedit$switchexperimental <- revalue(dataedit$What.should.the.contestant.therefore.do., c("switch"="1", "stay"="0"))
dataedit$switch <- ifelse(switchexperimental = 1 | switchcontrol = 1), 1,0)
dataedit$switch <- ifelse((switchexperimental = 1) | (switchcontrol = 1), 1,0)
dataedit$switch <- ifelse((switchexperimental = 1) | (switchcontrol = 1), 1,0)
dataedit$switch <- ifelse((switchexperimental = 1), 1,0)
View(dataedit)
View(dataedit)
dataedit$switch <- merge(dataedit$switchcontrol, dataedit$switchcontrol)
rm(dataedit$switch)
dataedit$switchcombo <- paste(dataedit$switchcontrol, dataedit$switchexperimental)
rm(data1)
data1 <- dataedit[-c(13)]
View(data1)
View(data1)
View(data1)
View(data1)
data1 <- dataedit[-c(13)]
View(data1)
data1 <- dataedit[-c(13),]
proportion <- table(data1$switchcombo, data1$expgroup)
rm(proportion)
table <- table(data1$switchcombo, data1$expgroup)
prop.table(table)
table
ftable(table)
datanofam <- subset(data1, familiarity!=1)
View(datanofam)
View(datanofam)
table <- table(datanofam$switchcombo, datanofam$expgroup)
table
ES.h((1/6), (0/5))
install.packages("pwr")
library(pwr)
ES.h((1/6), (0/5))
h <- ES.h((1/6), (0/5))
pwr.p.test(h=h,n=11,sig.level=0.05,alternative="one.sided")
pwr.p.test(h=h,n=11,sig.level=0.05,alternative="greater")
pwr.p.test(h=h,n=11,sig.level=0.05,alternative="less")
count1 <- count(data1, vars=c("switchcombo", "expgroup"))
count2 <- count(data1, "expgroup")
count1$totals <- count2$freq
count1$pct <- count1$freq / count1$totals
ggplot(data = count1, aes(x=switchcombo, y=pct))+
facet_wrap(~switchcombo)+
geom_bar()
library(plyr)
count1 <- count(data1, vars=c("switchcombo", "expgroup"))
count2 <- count(data1, "expgroup")
count1$totals <- count2$freq
View(count1)
View(count2)
View(count1)
hist(count1)
h = hist(x)
h = hist(data1)
his = hist(datanofam)
install.packages(dplyr)
install.packages("diplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("tidyr")
install.packages("tidyr")
install.packages("scales")
library(dplyr)
library(ggplot2)
library(tidyr)
library(scales)
library(dplyr)
install.packages("tidyr")
library(tidyr)
myplot <- ggplot(tips, aes(expgroup)) +
geom_bar(aes(y = (0)/sum(4))) +
scale_y_continuous(labels=scales::percent) +
ylab("proportions")
myplot
myplot <- ggplot(datanofam, aes(expgroup)) +
+     geom_bar(aes(y = (0)/sum(4))) +
+     scale_y_continuous(labels=scales::percent) +
+     ylab("proportions")
###Data Preparation
#load data
dataedit <- read.csv("C:/Users/john-/krauss2003/data/dataedit.csv", comment.char="#")
# tidy data, if neccesary
# each row will have these variables: participant_id, condition, switch_response, switchwinrelfreq (respondent's answer about the proportion of the time that switching wins), staywinrelfreq (prespondent's answer about the proportion of the time that staying wins), givenjustification (the respondent's justification), correctjustification (whether it is correct, according to the coding), priorproblemfamiliarity, prioranswerfamiliarity
#install packages
install.packages("plyr")
#recode varirables to make data on switches for both the experimental and the control group
dataedit$switchexperimental <- revalue(dataedit$What.should.the.contestant.therefore.do., c("switch"="1", "stay"="0"))
###Data Preparation
#load data
dataedit <- read.csv("C:/Users/john-/krauss2003/data/dataedit.csv", comment.char="#")
# tidy data, if neccesary
# each row will have these variables: participant_id, condition, switch_response, switchwinrelfreq (respondent's answer about the proportion of the time that switching wins), staywinrelfreq (prespondent's answer about the proportion of the time that staying wins), givenjustification (the respondent's justification), correctjustification (whether it is correct, according to the coding), priorproblemfamiliarity, prioranswerfamiliarity
#install packages
install.packages("plyr")
#recode varirables to make data on switches for both the experimental and the control group
dataedit$switchexperimental <- revalue(dataedit$What.should.the.contestant.therefore.do., c("switch"="1", "stay"="0"))
install.packages("plyr")
h
###Analysis
#calculate and see propotions
###table <- table(datanofam$switchcombo, datanofam$expgroup)
###table
#Cohen's h test
install.packages("pwr")
ibrary(pwr)
###Analysis
#calculate and see propotions
###table <- table(datanofam$switchcombo, datanofam$expgroup)
###table
#Cohen's h test
install.packages("pwr")
library(pwr)
h <- ES.h((1/6), (0/5))
h
###Analysis
#calculate and see propotions
table <- table(datanofam$switchcombo, datanofam$expgroup)
table
#Cohen's h test
install.packages("pwr")
library(pwr)
h <- ES.h((1/6), (0/5))
h
###Data Preparation
#load data
dataedit <- read.csv("C:/Users/john-/krauss2003/data/dataedit.csv", comment.char="#")
# tidy data, if neccesary
# each row will have these variables: participant_id, condition, switch_response, switchwinrelfreq (respondent's answer about the proportion of the time that switching wins), staywinrelfreq (prespondent's answer about the proportion of the time that staying wins), givenjustification (the respondent's justification), correctjustification (whether it is correct, according to the coding), priorproblemfamiliarity, prioranswerfamiliarity
#install packages with
###install.packages("plyr")
#recode varirables to make data on switches for both the experimental and the control group
dataedit$switchexperimental <- revalue(dataedit$What.should.the.contestant.therefore.do., c("switch"="1", "stay"="0"))
###Data Preparation
#load data
dataedit <- read.csv("C:/Users/john-/krauss2003/data/dataedit.csv", comment.char="#")
# tidy data, if neccesary
# each row will have these variables: participant_id, condition, switch_response, switchwinrelfreq (respondent's answer about the proportion of the time that switching wins), staywinrelfreq (prespondent's answer about the proportion of the time that staying wins), givenjustification (the respondent's justification), correctjustification (whether it is correct, according to the coding), priorproblemfamiliarity, prioranswerfamiliarity
#install packages with
install.packages("plyr")
#recode varirables to make data on switches for both the experimental and the control group
dataedit$switchexperimental <- revalue(dataedit$What.should.the.contestant.therefore.do., c("switch"="1", "stay"="0"))
###Data Preparation
#load data
dataedit <- read.csv("C:/Users/john-/krauss2003/data/dataedit.csv", comment.char="#")
# tidy data, if neccesary
# each row will have these variables: participant_id, condition, switch_response, switchwinrelfreq (respondent's answer about the proportion of the time that switching wins), staywinrelfreq (prespondent's answer about the proportion of the time that staying wins), givenjustification (the respondent's justification), correctjustification (whether it is correct, according to the coding), priorproblemfamiliarity, prioranswerfamiliarity
#install packages with
install.packages("plyr")
library("plyr")
#recode varirables to make data on switches for both the experimental and the control group
dataedit$switchexperimental <- revalue(dataedit$What.should.the.contestant.therefore.do., c("switch"="1", "stay"="0"))
dataedit$switchcontrol <- revalue(dataedit$After.Monty.Hall.has.opened.a..goat.door...what.should.you.do., c("switch"="1", "stay"="0"))
# combine data on switchs from experimental and control groups
dataedit$switchcombo <- paste(dataedit$switchcontrol, dataedit$switchexperimental)
#remove missing values
data1 <- dataedit[-c(13)]
# Filter participants who have prior answer familarity
datanofam <- subset(data1, familiarity!=1)
###Data Preparation
#load data
dataedit <- read.csv("C:/Users/john-/krauss2003/data/dataedit.csv", comment.char="#")
# tidy data, if neccesary
# each row will have these variables: participant_id, condition, switch_response, switchwinrelfreq (respondent's answer about the proportion of the time that switching wins), staywinrelfreq (prespondent's answer about the proportion of the time that staying wins), givenjustification (the respondent's justification), correctjustification (whether it is correct, according to the coding), priorproblemfamiliarity, prioranswerfamiliarity
#install packages with
install.packages("plyr")
library("plyr")
#recode varirables to make data on switches for both the experimental and the control group
dataedit$switchexperimental <- revalue(dataedit$What.should.the.contestant.therefore.do., c("switch"="1", "stay"="0"))
dataedit$switchcontrol <- revalue(dataedit$After.Monty.Hall.has.opened.a..goat.door...what.should.you.do., c("switch"="1", "stay"="0"))
# combine data on switchs from experimental and control groups
dataedit$switchcombo <- paste(dataedit$switchcontrol, dataedit$switchexperimental)
dataedit$familiarity <- revalue(dataedit$Please.also.tell.us.if.you.were.already.familiar.with.this.game., c("I was familiar with this game"="1", "I was not familiar with this game"="0"))
#remove missing values
data1 <- dataedit[-c(13)]
# Filter participants who have prior answer familarity
datanofam <- subset(data1, familiarity!=1)
install.packages("plyr")
###Analysis
#calculate and see propotions
table <- table(datanofam$switchcombo, datanofam$expgroup)
###Data Preparation
#load data
dataedit <- read.csv("C:/Users/john-/krauss2003/data/dataedit.csv", comment.char="#")
# tidy data, if neccesary
# each row will have these variables: participant_id, condition, switch_response, switchwinrelfreq (respondent's answer about the proportion of the time that switching wins), staywinrelfreq (prespondent's answer about the proportion of the time that staying wins), givenjustification (the respondent's justification), correctjustification (whether it is correct, according to the coding), priorproblemfamiliarity, prioranswerfamiliarity
#install packages with
install.packages("plyr")
library("plyr")
#recode varirables to make data on switches for both the experimental and the control group
dataedit$switchexperimental <- revalue(dataedit$What.should.the.contestant.therefore.do., c("switch"="1", "stay"="0"))
dataedit$switchcontrol <- revalue(dataedit$After.Monty.Hall.has.opened.a..goat.door...what.should.you.do., c("switch"="1", "stay"="0"))
# combine data on switchs from experimental and control groups
dataedit$switchcombo <- paste(dataedit$switchcontrol, dataedit$switchexperimental)
dataedit$familiarity <- revalue(dataedit$Please.also.tell.us.if.you.were.already.familiar.with.this.game., c("I was familiar with this game"="1", "I was not familiar with this game"="0"))
#remove missing values
data1 <- dataedit[-c(13)]
# Filter participants who have prior answer familarity
datanofam <- subset(data1, familiarity!=1)
###Analysis
#calculate and see propotions
table <- table(datanofam$switchcombo, datanofam$expgroup)
###Analysis
#load data from previous console code
dataedit <- read.csv("C:/Users/john-/krauss2003/data/dataedit.csv", comment.char="#")
install.packages("plyr")
library("plyr")
dataedit$switchexperimental <- revalue(dataedit$What.should.the.contestant.therefore.do., c("switch"="1", "stay"="0"))
dataedit$switchcontrol <- revalue(dataedit$After.Monty.Hall.has.opened.a..goat.door...what.should.you.do., c("switch"="1", "stay"="0"))
dataedit$switchcombo <- paste(dataedit$switchcontrol, dataedit$switchexperimental)
dataedit$familiarity <- revalue(dataedit$Please.also.tell.us.if.you.were.already.familiar.with.this.game., c("I was familiar with this game"="1", "I was not familiar with this game"="0"))
data1 <- dataedit[-c(13)]
datanofam <- subset(data1, familiarity!=1)
#calculate and see propotions
table <- table(datanofam$switchcombo, datanofam$expgroup)
install.packages("plyr")
###Analysis
#load data from previous console code
dataedit <- read.csv("C:/Users/john-/krauss2003/data/dataedit.csv", comment.char="#")
install.packages("plyr")
library("plyr")
dataedit$switchexperimental <- revalue(dataedit$What.should.the.contestant.therefore.do., c("switch"="1", "stay"="0"))
dataedit$switchcontrol <- revalue(dataedit$After.Monty.Hall.has.opened.a..goat.door...what.should.you.do., c("switch"="1", "stay"="0"))
dataedit$switchcombo <- paste(dataedit$switchcontrol, dataedit$switchexperimental)
dataedit$familiarity <- revalue(dataedit$Please.also.tell.us.if.you.were.already.familiar.with.this.game., c("I was familiar with this game"="1", "I was not familiar with this game"="0"))
data1 <- dataedit[-c(13)]
datanofam <- subset(data1, familiarity!=1)
#calculate and see propotions
table <- table(switchcombo, expgroup)
install.packages("plyr")
h
