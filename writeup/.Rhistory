library(MTurkR)
Sys.setenv("AWS_ACCESS_KEY_ID"="AKIAIHFDQNLEXERI5UQQ", "AWS_SECRET_KEY"="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")
library("MTurkR")
CreateQualificationType(DudQualification,
A dud qualification,
Active,
keywords = NULL,
retry.delay = 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
test = questions, answerkey = answerkeydoc,
test.duration = NULL,
validate.test = FALSE, validate.answerkey = FALSE,
auto = NULL, auto.value = NULL,
verbose = getOption('MTurkR.verbose', TRUE), ...)
CreateQualificationType(name =
DudQualification",
description = "A dud qualification",
status = "Active",
keywords = NULL,
retry.delay = 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
test = questions, answerkey = answerkeydoc,
test.duration = NULL,
validate.test = FALSE, validate.answerkey = FALSE,
auto = NULL, auto.value = NULL,
verbose = getOption('MTurkR.verbose', TRUE))
CreateQualificationType(name =
"DudQualification",
description = "A dud qualification",
status = "Active",
keywords = NULL,
retry.delay = 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
test = questions, answerkey = answerkeydoc,
test.duration = NULL,
validate.test = FALSE, validate.answerkey = FALSE,
auto = NULL, auto.value = NULL,
verbose = getOption('MTurkR.verbose', TRUE))
Sys.setenv("AWS_ACCESS_KEY_ID"="AKIAJAV6AHLPUYG72C3Q", "AWS_SECRET_KEY"="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")
library("MTurkR")
questions <- read_file("C:/Users/john-/qualification/questions.txt")
answerkeydoc <- read_file("C:/Users/john-/qualification/answerkey.txt")
CreateQualificationType(name =
"DudQualification",
description = "A dud qualification",
status = "Active",
keywords = NULL,
retry.delay = 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
test = questions, answerkey = answerkeydoc,
test.duration = NULL,
validate.test = FALSE, validate.answerkey = FALSE,
auto = NULL, auto.value = NULL,
verbose = getOption('MTurkR.verbose', TRUE))
CreateQualificationType(name =
"DudQualification",
description = "A dud qualification",
status = "Active",
keywords = NULL)
Sys.setenv("AWS_ACCESS_KEY_ID"="AKIAJAV6AHLPUYG72C3Q", "AWS_SECRET_ACCESS_KEY"="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")
CreateQualificationType(name =
"DudQualification",
description = "A dud qualification",
status = "Active",
keywords = NULL,
retry.delay = 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
test = questions, answerkey = answerkeydoc,
test.duration = NULL,
validate.test = FALSE, validate.answerkey = FALSE,
auto = NULL, auto.value = NULL,
verbose = getOption('MTurkR.verbose', TRUE))
CreateQualificationType(name =
"DudQualification",
description = "A dud qualification",
status = "Active",
keywords = NULL)
CreateQualificationType(name =
"DudQualification",
description = "A dud qualification",
status = "Active",
keywords = NULL,
retry.delay = 100,
test = questions, answerkey = answerkeydoc,
test.duration = NULL,
validate.test = FALSE, validate.answerkey = FALSE,
auto = NULL, auto.value = NULL,
verbose = getOption('MTurkR.verbose', TRUE))
CreateQualificationType(name =
"DudQualification1",
description = "A dud qualification",
status = "Active",
keywords = NULL,
retry.delay = 100,
test = questions, answerkey = answerkeydoc,
test.duration = NULL,
validate.test = FALSE, validate.answerkey = FALSE,
auto = NULL, auto.value = NULL,
verbose = getOption('MTurkR.verbose', TRUE))
CreateQualificationType(name =
"DudQualification2",
description = "A dud qualification",
status = "Active",
keywords = NULL,
retry.delay = 10000000000,
test = questions, answerkey = answerkeydoc,
test.duration = 600,
validate.test = FALSE, validate.answerkey = FALSE,
auto = NULL, auto.value = NULL,
verbose = getOption('MTurkR.verbose', TRUE))
CreateQualificationType(name =
"DudQualification2",
description = "A dud qualification",
status = "Active",
keywords = NULL,
retry.delay = 10000,
test = questions, answerkey = answerkeydoc,
test.duration = 600,
validate.test = FALSE, validate.answerkey = FALSE,
auto = NULL, auto.value = NULL,
verbose = getOption('MTurkR.verbose', TRUE))
CreateQualificationType(name =
"DudQualification2",
description = "A dud qualification",
status = "Active",
keywords = NULL,
retry.delay = 10000,
test = questions,
answerkey = answerkeydoc,
test.duration = 600,
validate.test = FALSE, validate.answerkey = FALSE,
auto = NULL, auto.value = NULL,
verbose = getOption('MTurkR.verbose', TRUE))
Sys.setenv("AWS_ACCESS_KEY_ID"="AKIAJAV6AHLPUYG72C3Q", "AWS_SECRET_ACCESS_KEY"="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")
questions <- read_file("C:/Users/john-/qualification/questions.txt")
answerkeydoc <- read_file("C:/Users/john-/qualification/answerkey.txt")
CreateQualificationType(name =
"DudQualification2",
description = "A dud qualification",
status = "Active",
keywords = NULL,
retry.delay = 10000,
test = questions,
answerkey = answerkeydoc,
test.duration = 600,
validate.test = FALSE, validate.answerkey = FALSE,
auto = NULL, auto.value = NULL,
verbose = getOption('MTurkR.verbose', TRUE))
Sys.setenv("AWS_ACCESS_KEY_ID"="AKIAJAV6AHLPUYG72C3Q", "AWS_SECRET_ACCESS_KEY"="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")
questions <- read_file("C:/Users/john-/qualification/questions.txt")
answerkeydoc <- read_file("C:/Users/john-/qualification/answerkey.txt")
CreateQualificationType(name =
"DudQualification2",
description = "A dud qualification",
status = "Active",
keywords = NULL,
retry.delay = 10000,
test = questions,
answerkey = answerkeydoc,
test.duration = 600,
validate.test = FALSE, validate.answerkey = FALSE,
auto = NULL, auto.value = NULL,
verbose = getOption('MTurkR.verbose', TRUE))
Sys.setenv("AWS_ACCESS_KEY_ID"="AKIAJAV6AHLPUYG72C3Q", "AWS_SECRET_ACCESS_KEY"="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")
questions <- read_file("C:/Users/john-/qualification/questions.txt")
answerkeydoc <- read_file("C:/Users/john-/qualification/answerkey.txt")
CreateQualificationType(name =
"DudQualification2",
description = "A dud qualification",
status = "Active",
keywords = NULL,
retry.delay = 10000,
test = questions,
answerkey = answerkeydoc,
test.duration = 600,
validate.test = FALSE, validate.answerkey = FALSE,
auto = NULL, auto.value = NULL,
verbose = getOption('MTurkR.verbose', TRUE))
Sys.setenv("AWS_ACCESS_KEY_ID"="AKIAJAV6AHLPUYG72C3Q", "AWS_SECRET_ACCESS_KEY"="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")
questions <- read_file("C:/Users/john-/qualification/questions.txt")
answerkeydoc <- read_file("C:/Users/john-/qualification/answerkey.txt")
CreateQualificationType(name =
"DudQualification2",
description = "A dud qualification",
status = "Active",
keywords = NULL,
retry.delay = 10000,
test = questions,
answerkey = answerkeydoc,
test.duration = 600,
validate.test = FALSE, validate.answerkey = FALSE,
auto = NULL, auto.value = NULL,
verbose = getOption('MTurkR.verbose', TRUE))
Sys.setenv("AWS_ACCESS_KEY_ID"="AKIAJAV6AHLPUYG72C3Q", "AWS_SECRET_ACCESS_KEY"="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")
questions <- read_file("C:/Users/john-/qualification/questions.txt")
answerkeydoc <- read_file("C:/Users/john-/qualification/answerkey.txt")
CreateQualificationType(name =
"DudQualification2",
description = "A dud qualification",
status = "Active",
keywords = NULL,
retry.delay = 10000,
test = questions,
answerkey = answerkeydoc,
test.duration = 600,
validate.test = FALSE, validate.answerkey = FALSE,
auto = NULL, auto.value = NULL,
verbose = getOption('MTurkR.verbose', TRUE))
Sys.setenv("AWS_ACCESS_KEY_ID"="AKIAJAV6AHLPUYG72C3Q", "AWS_SECRET_ACCESS_KEY"="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")
questions <- read_file("C:/Users/john-/qualification/questions.txt")
answerkeydoc <- read_file("C:/Users/john-/qualification/answerkey.txt")
CreateQualificationType(name =
"DudQualification3",
description = "A dud qualification",
status = "Active",
keywords = NULL,
retry.delay = 10000,
test = questions,
answerkey = answerkeydoc,
test.duration = 600,
validate.test = FALSE, validate.answerkey = FALSE,
auto = NULL, auto.value = NULL,
verbose = getOption('MTurkR.verbose', TRUE))
Sys.setenv("AWS_ACCESS_KEY_ID"="AKIAJAV6AHLPUYG72C3Q", "AWS_SECRET_ACCESS_KEY"="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")
questions <- read_file("C:/Users/john-/qualification/questions.txt")
answerkeydoc <- read_file("C:/Users/john-/qualification/answerkey.txt")
CreateQualificationType(name =
"DudQualification3",
description = "A dud qualification",
status = "Active",
keywords = NULL,
retry.delay = 10000,
test = questions,
answerkey = answerkeydoc,
test.duration = 600,
validate.test = FALSE, validate.answerkey = FALSE,
auto = NULL, auto.value = NULL,
verbose = getOption('MTurkR.verbose', TRUE),
sandbox=TRUE)
Sys.setenv("AWS_ACCESS_KEY_ID"="AKIAJAV6AHLPUYG72C3Q", "AWS_SECRET_ACCESS_KEY"="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")
questions <- read_file("C:/Users/john-/qualification/questions.txt")
answerkeydoc <- read_file("C:/Users/john-/qualification/answerkey.txt")
CreateQualificationType(name =
"DudQualification4",
description = "A dud qualification",
status = "Active",
keywords = NULL,
retry.delay = 10000,
test = questions,
answerkey = answerkeydoc,
test.duration = 600,
validate.test = FALSE, validate.answerkey = FALSE,
auto = NULL, auto.value = NULL,
verbose = getOption('MTurkR.verbose', TRUE),
sandbox=TRUE)
Sys.setenv("AWS_ACCESS_KEY_ID"="AKIAJAV6AHLPUYG72C3Q", "AWS_SECRET_ACCESS_KEY"="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")
questions <- read_file("C:/Users/john-/qualification/questions.txt")
answerkeydoc <- read_file("C:/Users/john-/qualification/answerkey.txt")
CreateQualificationType(name =
"DudQualification4",
description = "A dud qualification",
status = "Active",
keywords = NULL,
retry.delay = 10000,
test = questions,
answerkey = answerkeydoc,
test.duration = 600,
validate.test = FALSE, validate.answerkey = FALSE,
auto = NULL, auto.value = NULL,
verbose = getOption('MTurkR.verbose', TRUE),
sandbox=TRUE)
Sys.setenv("AWS_ACCESS_KEY_ID"="AKIAJAV6AHLPUYG72C3Q", "AWS_SECRET_ACCESS_KEY"="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")
questions <- read_file("C:/Users/john-/qualification/questions.txt")
answerkeydoc <- read_file("C:/Users/john-/qualification/answerkey.txt")
CreateQualificationType(name =
"DudQualification4",
description = "A dud qualification",
status = "Active",
keywords = NULL,
retry.delay = 10000,
test = questions,
answerkey = answerkeydoc,
test.duration = 600,
validate.test = FALSE, validate.answerkey = FALSE,
auto = NULL, auto.value = NULL,
verbose = getOption('MTurkR.verbose', TRUE),
sandbox=TRUE)
Sys.setenv("AWS_ACCESS_KEY_ID"="AKIAJAV6AHLPUYG72C3Q", "AWS_SECRET_ACCESS_KEY"="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")
questions <- read_file("C:/Users/john-/qualification/questions.txt")
answerkeydoc <- read_file("C:/Users/john-/qualification/answerkey.txt")
CreateQualificationType(name =
"DudQualification5",
description = "A dud qualification",
status = "Active",
keywords = NULL,
retry.delay = 10000,
test = questions,
answerkey = answerkeydoc,
test.duration = 600,
validate.test = FALSE, validate.answerkey = FALSE,
auto = NULL, auto.value = NULL,
verbose = getOption('MTurkR.verbose', TRUE),
sandbox=TRUE)
CreateQualificationType(name =
"DudQualification6",
description = "A dud qualification",
status = "Active",
keywords = NULL,
retry.delay = 100000000000000000000000000000000000000000000000000000000000000000000,
test = questions,
answerkey = answerkeydoc,
test.duration = 600,
validate.test = FALSE, validate.answerkey = FALSE,
auto = NULL, auto.value = NULL,
verbose = getOption('MTurkR.verbose', TRUE),
sandbox=TRUE)
Sys.setenv("AWS_ACCESS_KEY_ID"="AKIAJAV6AHLPUYG72C3Q", "AWS_SECRET_ACCESS_KEY"="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")
questions <- read_file("C:/Users/john-/qualification/questions.txt")
answerkeydoc <- read_file("C:/Users/john-/qualification/answerkey.txt")
CreateQualificationType(name =
"DudQualification6",
description = "A dud qualification",
status = "Active",
keywords = NULL,
retry.delay = 100000000000000000000000000000000,
test = questions,
answerkey = answerkeydoc,
test.duration = 600,
validate.test = FALSE, validate.answerkey = FALSE,
auto = NULL, auto.value = NULL,
verbose = getOption('MTurkR.verbose', TRUE),
sandbox=TRUE)
CreateQualificationType(name =
"DudQualification6",
description = "A dud qualification",
status = "Active",
keywords = NULL,
retry.delay = 1000000000000000000000000,
test = questions,
answerkey = answerkeydoc,
test.duration = 600,
validate.test = FALSE, validate.answerkey = FALSE,
auto = NULL, auto.value = NULL,
verbose = getOption('MTurkR.verbose', TRUE),
sandbox=TRUE)
Sys.setenv("AWS_ACCESS_KEY_ID"="AKIAJAV6AHLPUYG72C3Q", "AWS_SECRET_ACCESS_KEY"="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")
Sys.setenv("AWS_ACCESS_KEY_ID"="AKIAJAV6AHLPUYG72C3Q", "AWS_SECRET_ACCESS_KEY"="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")
questions <- read_file("C:/Users/john-/qualification/questions.txt")
answerkeydoc <- read_file("C:/Users/john-/qualification/answerkey.txt")
CreateQualificationType(name =
"DudQualification6",
description = "A dud qualification",
status = "Active",
keywords = NULL,
retry.delay = 1000000000000000000,
test = questions,
answerkey = answerkeydoc,
test.duration = 600,
validate.test = FALSE, validate.answerkey = FALSE,
auto = NULL, auto.value = NULL,
verbose = getOption('MTurkR.verbose', TRUE),
sandbox=TRUE)
Sys.setenv("AWS_ACCESS_KEY_ID"="AKIAJAV6AHLPUYG72C3Q", "AWS_SECRET_ACCESS_KEY"="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")
questions <- read_file("C:/Users/john-/qualification/questions.txt")
answerkeydoc <- read_file("C:/Users/john-/qualification/answerkey.txt")
CreateQualificationType(name =
"DudQualification6",
description = "A dud qualification",
status = "Active",
keywords = NULL,
retry.delay = 100000000000,
test = questions,
answerkey = answerkeydoc,
test.duration = 600,
validate.test = FALSE, validate.answerkey = FALSE,
auto = NULL, auto.value = NULL,
verbose = getOption('MTurkR.verbose', TRUE),
sandbox=TRUE)
Sys.setenv("AWS_ACCESS_KEY_ID"="AKIAJAV6AHLPUYG72C3Q", "AWS_SECRET_ACCESS_KEY"="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")
questions <- read_file("C:/Users/john-/qualification/questions.txt")
answerkeydoc <- read_file("C:/Users/john-/qualification/answerkey.txt")
CreateQualificationType(name =
"DudQualification7",
description = "A dud qualification",
status = "Active",
keywords = NULL,
retry.delay = NULL,
test = questions,
answerkey = answerkeydoc,
test.duration = 600,
validate.test = FALSE, validate.answerkey = FALSE,
auto = NULL, auto.value = NULL,
verbose = getOption('MTurkR.verbose', TRUE),
sandbox=TRUE)
dataedit <- read.csv("C:/Users/john-/krauss2003/data/dataedit.csv", comment.char="#")
library("tidyverse")
data_renamed = dataedit %>% rename(
experimental_switch = What.should.the.contestant.therefore.do.,
control_switch = After.Monty.Hall.has.opened.a..goat.door...what.should.you.do.,
familiarity = Please.also.tell.us.if.you.were.already.familiar.with.this.game.
)
data_gathered = data_renamed %>% gather(condition, switch, c(experimental_switch, control_switch)) %>%
filter(switch!="") %>%
filter(!is.na(switch))
data_recoded = data_gathered %>%
mutate(familiarity = revalu (familiarity, ...))
?mutate
View(data_gathered)
data_gathered$experimental <- revalue(data_gathered$condition, c("experimental_switch"="1", "control_switch"="0"))
View(data_gathered)
View(data_gathered)
data_recoded = data_gathered %>%
mutate(experimental = revalue(condition, c("experimental_switch"="1", "control_switch"="0")))
library(plyr)
data_recoded = data_gathered %>%
mutate(experimental = revalue(condition, c("experimental_switch"="1", "control_switch"="0")))
View(data_gathered)
View(data_gathered)
View(data_recoded)
View(data_recoded)
data_recoded = data_gathered %>%
mutate(
experimental = revalue(condition, c("experimental_switch"="1", "control_switch"="0")),
experimental = revalue(switch, c("switch"="1", "stay"="0")
)
View(data_recoded)
View(data_recoded)
data_recoded = data_gathered %>%
mutate(
experimental = revalue(condition, c("experimental_switch"="1", "control_switch"="0")),
experimental = revalue(switch, c("switch"="1", "stay"="0")
))
View(data_recoded)
View(data_recoded)
View(data_recoded)
View(data_recoded)
data_recoded = data_gathered %>%
mutate(
experimental = revalue(condition, c("experimental_switch"="1", "control_switch"="0")),
switchrecoded = revalue(switch, c("switch"="1", "stay"="0")
))
View(data_recoded)
View(data_recoded)
table <- table(switch, condition)
table <- table(data_gathered$switch, data_gathered$condition)
table
data_recoded = data_gathered %>%
mutate(
condition = revalue(condition, c("experimental_switch"="experimental", "control_switch"="control"))
)
table <- table(data_gathered$switch, data_gathered$condition)
table <- table(data_recoded$switch, data_gathered$condition)
table <- table(data_recoded$switch, data_recoded$condition)
table <- with(
data_recoded,
table(switch, condition))
table
as.matrix(table)
fisher.test(as.matrix(table))
table
table["switch"]
table["switch",]
table["stay",]
table["switch",] /  table["stay",]
ratios = table["switch",] /  table["stay",]
ratios
ratios["control"]
table["switch", "control"]
table["switch", "experimental"]
table[, "experimental"]
(table["switch", "control"]/
(table["switch", "control"]+ table["stay", "control"])
)
(table["switch", "experimental"]/
(table["switch", "experimental"]+ table["stay", "experimental"]))
nstall.packages("pwr")
ratios = table["switch",] / table["stay",]
h <- ES.h(
(table["switch", "control"]/
(table["switch", "control"]+ table["stay", "control"]))
(table["switch", "experimental"]/
(table["switch", "experimental"]+ table["stay", "experimental"]))
)
install.packages("pwr")
library(pwr)
ratios = table["switch",] / table["stay",]
h <- ES.h(
(table["switch", "control"]/
(table["switch", "control"]+ table["stay", "control"]))
(table["switch", "experimental"]/
(table["switch", "experimental"]+ table["stay", "experimental"]))
)
ratios = table["switch",] / table["stay",]
h <- ES.h(
(table["switch", "control"]/
(table["switch", "control"]+ table["stay", "control"])),
(table["switch", "experimental"]/
(table["switch", "experimental"]+ table["stay", "experimental"]))
)
ratios = table["switch",] / table["stay",]
h <- ES.h(
(table["switch", "control"]/
(table["switch", "control"]+ table["stay", "control"])),
(table["switch", "experimental"]/
(table["switch", "experimental"]+ table["stay", "experimental"]))
)
h # displays h
test <-  fisher.test(as.matrix(table))
h <- ES.h(
(table["switch", "control"]/
(table["switch", "control"]+ table["stay", "control"])),
(table["switch", "experimental"]/
(table["switch", "experimental"]+ table["stay", "experimental"]))
)
test <-  fisher.test(as.matrix(table))
h
test
